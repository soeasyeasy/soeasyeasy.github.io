import{_ as t,c as d,a as o,o as n}from"./app-qwDAWgIM.js";const r={};function c(a,e){return n(),d("div",null,e[0]||(e[0]=[o(`<h1 id="🐳-docker-docker-compose-命令大全-超详细版" tabindex="-1"><a class="header-anchor" href="#🐳-docker-docker-compose-命令大全-超详细版"><span>🐳 <strong>Docker &amp; Docker Compose 命令大全（超详细版）</strong></span></a></h1><hr><h2 id="一、docker-基础命令分类" tabindex="-1"><a class="header-anchor" href="#一、docker-基础命令分类"><span>一、Docker 基础命令分类</span></a></h2><h3 id="✅-1-镜像管理-image" tabindex="-1"><a class="header-anchor" href="#✅-1-镜像管理-image"><span>✅ 1. 镜像管理（Image）</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker images</code></td><td>列出本地所有镜像</td></tr><tr><td><code>docker images -a</code></td><td>显示所有镜像（包括中间层）</td></tr><tr><td><code>docker images --no-trunc</code></td><td>显示完整镜像 ID</td></tr><tr><td><code>docker search nginx</code></td><td>搜索 Docker Hub 上的镜像</td></tr><tr><td><code>docker pull nginx:latest</code></td><td>拉取镜像（可指定标签）</td></tr><tr><td><code>docker pull --platform linux/amd64 nginx</code></td><td>拉取指定架构镜像</td></tr><tr><td><code>docker push myrepo/myapp:v1</code></td><td>推送镜像到仓库</td></tr><tr><td><code>docker tag nginx mynginx:custom</code></td><td>给镜像打标签</td></tr><tr><td><code>docker rmi nginx</code></td><td>删除镜像</td></tr><tr><td><code>docker rmi $(docker images -q)</code></td><td>删除所有本地镜像（慎用）</td></tr><tr><td><code>docker image prune</code></td><td>删除悬空镜像（dangling）</td></tr><tr><td><code>docker image prune -a</code></td><td>删除所有未使用的镜像</td></tr><tr><td><code>docker image ls --digests</code></td><td>显示镜像摘要（digest）</td></tr><tr><td><code>docker image inspect nginx</code></td><td>查看镜像详细信息（JSON）</td></tr></tbody></table><hr><h3 id="✅-2-容器生命周期管理-container" tabindex="-1"><a class="header-anchor" href="#✅-2-容器生命周期管理-container"><span>✅ 2. 容器生命周期管理（Container）</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker run hello-world</code></td><td>运行一个容器（一次性）</td></tr><tr><td><code>docker run -d nginx</code></td><td>后台运行容器（detached）</td></tr><tr><td><code>docker run -it ubuntu /bin/bash</code></td><td>交互式运行并进入容器</td></tr><tr><td><code>docker run -p 8080:80 nginx</code></td><td>端口映射（宿主机:容器）</td></tr><tr><td><code>docker run -v /host:/container nginx</code></td><td>卷映射（持久化数据）</td></tr><tr><td><code>docker run --name myapp nginx</code></td><td>指定容器名称</td></tr><tr><td><code>docker run --rm nginx</code></td><td>容器退出后自动删除</td></tr><tr><td><code>docker run --env NAME=Qwen nginx</code></td><td>设置环境变量</td></tr><tr><td><code>docker start container_id</code></td><td>启动已停止的容器</td></tr><tr><td><code>docker stop container_id</code></td><td>停止容器（发送 SIGTERM）</td></tr><tr><td><code>docker restart container_id</code></td><td>重启容器</td></tr><tr><td><code>docker kill container_id</code></td><td>强制终止容器（发送 SIGKILL）</td></tr><tr><td><code>docker pause container_id</code></td><td>暂停容器（冻结进程）</td></tr><tr><td><code>docker unpause container_id</code></td><td>恢复容器</td></tr><tr><td><code>docker rm container_id</code></td><td>删除容器</td></tr><tr><td><code>docker rm -f container_id</code></td><td>强制删除运行中的容器</td></tr><tr><td><code>docker container prune</code></td><td>删除所有已停止的容器</td></tr></tbody></table><hr><h3 id="✅-3-容器查看与调试" tabindex="-1"><a class="header-anchor" href="#✅-3-容器查看与调试"><span>✅ 3. 容器查看与调试</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker ps</code></td><td>查看运行中的容器</td></tr><tr><td><code>docker ps -a</code></td><td>查看所有容器（包括停止的）</td></tr><tr><td><code>docker ps -q</code></td><td>仅显示容器 ID（适合脚本）</td></tr><tr><td><code>docker ps -l</code></td><td>显示最新创建的容器</td></tr><tr><td><code>docker logs container_id</code></td><td>查看容器日志</td></tr><tr><td><code>docker logs -f container_id</code></td><td>实时查看日志（类似 tail -f）</td></tr><tr><td><code>docker logs -t container_id</code></td><td>显示时间戳</td></tr><tr><td><code>docker logs --tail 100 container_id</code></td><td>查看最后 100 行日志</td></tr><tr><td><code>docker exec -it container_id /bin/bash</code></td><td>进入正在运行的容器</td></tr><tr><td><code>docker exec -u 0 -it container_id /bin/sh</code></td><td>以 root 用户进入容器</td></tr><tr><td><code>docker top container_id</code></td><td>查看容器内运行的进程</td></tr><tr><td><code>docker stats</code></td><td>实时查看容器资源使用（CPU、内存、网络）</td></tr><tr><td><code>docker stats --no-stream</code></td><td>查看当前资源使用（不持续）</td></tr><tr><td><code>docker inspect container_id</code></td><td>查看容器详细信息（JSON 格式）</td></tr><tr><td><code>docker port container_id</code></td><td>查看端口映射</td></tr><tr><td><code>docker diff container_id</code></td><td>查看容器文件系统变化（A:新增, D:删除, C:修改）</td></tr></tbody></table><hr><h3 id="✅-4-网络管理-network" tabindex="-1"><a class="header-anchor" href="#✅-4-网络管理-network"><span>✅ 4. 网络管理（Network）</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker network ls</code></td><td>列出所有网络</td></tr><tr><td><code>docker network create mynet</code></td><td>创建自定义网络</td></tr><tr><td><code>docker network create --driver bridge mynet</code></td><td>创建桥接网络</td></tr><tr><td><code>docker network create --driver overlay mynet</code></td><td>创建覆盖网络（Swarm）</td></tr><tr><td><code>docker network connect mynet container_id</code></td><td>将容器连接到网络</td></tr><tr><td><code>docker network disconnect mynet container_id</code></td><td>断开容器网络连接</td></tr><tr><td><code>docker network inspect mynet</code></td><td>查看网络详情</td></tr><tr><td><code>docker network rm mynet</code></td><td>删除网络</td></tr><tr><td><code>docker run --network mynet nginx</code></td><td>运行容器并指定网络</td></tr><tr><td><code>docker run --network host nginx</code></td><td>使用主机网络模式（高性能）</td></tr><tr><td><code>docker run --network none nginx</code></td><td>不使用网络</td></tr></tbody></table><hr><h3 id="✅-5-存储卷管理-volume" tabindex="-1"><a class="header-anchor" href="#✅-5-存储卷管理-volume"><span>✅ 5. 存储卷管理（Volume）</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker volume ls</code></td><td>列出所有卷</td></tr><tr><td><code>docker volume create myvol</code></td><td>创建卷</td></tr><tr><td><code>docker volume inspect myvol</code></td><td>查看卷详情</td></tr><tr><td><code>docker volume rm myvol</code></td><td>删除卷</td></tr><tr><td><code>docker volume prune</code></td><td>删除未使用的卷</td></tr><tr><td><code>docker run -v myvol:/data nginx</code></td><td>使用命名卷</td></tr><tr><td><code>docker run -v /path/on/host:/data nginx</code></td><td>使用绑定挂载（bind mount）</td></tr><tr><td><code>docker run --mount source=myvol,target=/data nginx</code></td><td>使用 --mount 语法（推荐）</td></tr><tr><td><code>docker volume create --driver local --opt type=tmpfs --opt device=tmpfs mytmp</code></td><td>创建 tmpfs 卷</td></tr></tbody></table><hr><h3 id="✅-6-构建与镜像制作-build" tabindex="-1"><a class="header-anchor" href="#✅-6-构建与镜像制作-build"><span>✅ 6. 构建与镜像制作（Build）</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker build -t myapp:v1 .</code></td><td>构建镜像</td></tr><tr><td><code>docker build --no-cache -t myapp .</code></td><td>构建时不使用缓存</td></tr><tr><td><code>docker build --build-arg HTTP_PROXY=http://proxy:8080 .</code></td><td>传递构建参数</td></tr><tr><td><code>docker build --target builder .</code></td><td>多阶段构建，指定目标阶段</td></tr><tr><td><code>docker buildx build --platform linux/amd64,linux/arm64 .</code></td><td>跨平台构建（需 buildx）</td></tr><tr><td><code>docker save -o myapp.tar myapp:v1</code></td><td>将镜像保存为 tar 文件</td></tr><tr><td><code>docker load -i myapp.tar</code></td><td>从 tar 文件加载镜像</td></tr><tr><td><code>docker import url.tar myapp:v1</code></td><td>从 tar 导入镜像（不保留历史）</td></tr><tr><td><code>docker export container_id &gt; container.tar</code></td><td>导出容器文件系统</td></tr><tr><td><code>docker import container.tar myapp:v1</code></td><td>从容器文件系统导入镜像</td></tr></tbody></table><hr><h3 id="✅-7-docker-系统与信息" tabindex="-1"><a class="header-anchor" href="#✅-7-docker-系统与信息"><span>✅ 7. Docker 系统与信息</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker version</code></td><td>查看 Docker 版本</td></tr><tr><td><code>docker info</code></td><td>查看 Docker 系统信息</td></tr><tr><td><code>docker system df</code></td><td>查看磁盘使用情况（镜像、容器、卷）</td></tr><tr><td><code>docker system prune</code></td><td>清理未使用的资源（容器、网络、镜像）</td></tr><tr><td><code>docker system prune -a</code></td><td>清理所有未使用的资源（包括镜像）</td></tr><tr><td><code>docker system prune --volumes</code></td><td>清理未使用的卷</td></tr><tr><td><code>docker login</code></td><td>登录 Docker 仓库</td></tr><tr><td><code>docker logout</code></td><td>注销登录</td></tr><tr><td><code>docker events</code></td><td>实时查看 Docker 事件流</td></tr><tr><td><code>docker history nginx</code></td><td>查看镜像构建历史</td></tr><tr><td><code>docker wait container_id</code></td><td>阻塞直到容器停止，返回退出码</td></tr></tbody></table><hr><h2 id="二、docker-compose-命令大全" tabindex="-1"><a class="header-anchor" href="#二、docker-compose-命令大全"><span>二、Docker Compose 命令大全</span></a></h2><blockquote><p>💡 使用 <code>docker compose</code>（新插件）或 <code>docker-compose</code>（旧独立命令）</p></blockquote><h3 id="✅-常用命令" tabindex="-1"><a class="header-anchor" href="#✅-常用命令"><span>✅ 常用命令</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker compose up</code></td><td>启动所有服务</td></tr><tr><td><code>docker compose up -d</code></td><td>后台启动</td></tr><tr><td><code>docker compose up --build</code></td><td>构建后启动</td></tr><tr><td><code>docker compose up --force-recreate</code></td><td>强制重建容器</td></tr><tr><td><code>docker compose down</code></td><td>停止并删除容器、网络</td></tr><tr><td><code>docker compose down -v</code></td><td>删除卷（谨慎！）</td></tr><tr><td><code>docker compose down --rmi all</code></td><td>删除镜像</td></tr><tr><td><code>docker compose stop</code></td><td>停止服务（不删除）</td></tr><tr><td><code>docker compose start</code></td><td>启动已停止的服务</td></tr><tr><td><code>docker compose restart</code></td><td>重启服务</td></tr><tr><td><code>docker compose ps</code></td><td>查看服务状态</td></tr><tr><td><code>docker compose logs</code></td><td>查看所有服务日志</td></tr><tr><td><code>docker compose logs -f web</code></td><td>实时查看某服务日志</td></tr><tr><td><code>docker compose exec web /bin/sh</code></td><td>进入服务容器</td></tr><tr><td><code>docker compose build</code></td><td>构建服务镜像</td></tr><tr><td><code>docker compose build --no-cache</code></td><td>不使用缓存构建</td></tr><tr><td><code>docker compose config</code></td><td>验证并显示最终 compose 配置</td></tr><tr><td><code>docker compose config --services</code></td><td>仅列出服务名称</td></tr><tr><td><code>docker compose config --images</code></td><td>仅列出镜像</td></tr><tr><td><code>docker compose top</code></td><td>查看服务进程</td></tr><tr><td><code>docker compose pause</code></td><td>暂停所有服务</td></tr><tr><td><code>docker compose unpause</code></td><td>恢复暂停的服务</td></tr><tr><td><code>docker compose kill</code></td><td>强制终止服务</td></tr><tr><td><code>docker compose run web /bin/sh</code></td><td>临时运行一个服务容器（用于调试）</td></tr><tr><td><code>docker compose run --rm web ls /</code></td><td>运行一次命令后删除容器</td></tr></tbody></table><hr><h3 id="✅-高级-compose-技巧" tabindex="-1"><a class="header-anchor" href="#✅-高级-compose-技巧"><span>✅ 高级 Compose 技巧</span></a></h3><h4 id="_1-使用多个-compose-文件-环境隔离" tabindex="-1"><a class="header-anchor" href="#_1-使用多个-compose-文件-环境隔离"><span>1. 使用多个 compose 文件（环境隔离）</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose.yml <span class="token parameter variable">-f</span> docker-compose.prod.yml up <span class="token parameter variable">-d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-指定环境文件" tabindex="-1"><a class="header-anchor" href="#_2-指定环境文件"><span>2. 指定环境文件</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment"># docker-compose.yml</span></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">app</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> DB_HOST</span>
<span class="line"><span class="token comment"># .env 文件</span></span>
<span class="line">DB_HOST=prod<span class="token punctuation">-</span>db.example.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-健康检查" tabindex="-1"><a class="header-anchor" href="#_3-健康检查"><span>3. 健康检查</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">healthcheck</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;CMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;curl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/health&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">interval</span><span class="token punctuation">:</span> 30s</span>
<span class="line">  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s</span>
<span class="line">  <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-依赖与启动顺序" tabindex="-1"><a class="header-anchor" href="#_4-依赖与启动顺序"><span>4. 依赖与启动顺序</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">db</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、您可能不知道的-docker-高级命令" tabindex="-1"><a class="header-anchor" href="#三、您可能不知道的-docker-高级命令"><span>三、您可能不知道的 Docker 高级命令</span></a></h2><h3 id="🔥-1-docker-stats-format-自定义输出" tabindex="-1"><a class="header-anchor" href="#🔥-1-docker-stats-format-自定义输出"><span>🔥 1. <code>docker stats --format</code>（自定义输出）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stats <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.Name}}<span class="token entity" title="\\t">\\t</span>{{.CPUPerc}}<span class="token entity" title="\\t">\\t</span>{{.MemUsage}}&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="🔥-2-docker-run-init-使用-tini-作为-init-进程" tabindex="-1"><a class="header-anchor" href="#🔥-2-docker-run-init-使用-tini-作为-init-进程"><span>🔥 2. <code>docker run --init</code>（使用 tini 作为 init 进程）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--init</span> myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>避免僵尸进程，推荐生产使用。</p></blockquote><h3 id="🔥-3-docker-run-read-only-只读文件系统" tabindex="-1"><a class="header-anchor" href="#🔥-3-docker-run-read-only-只读文件系统"><span>🔥 3. <code>docker run --read-only</code>（只读文件系统）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run --read-only <span class="token parameter variable">--tmpfs</span> /tmp myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>提高安全性。</p></blockquote><h3 id="🔥-4-docker-run-security-opt-安全选项" tabindex="-1"><a class="header-anchor" href="#🔥-4-docker-run-security-opt-安全选项"><span>🔥 4. <code>docker run --security-opt</code>（安全选项）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run --security-opt <span class="token assign-left variable">apparmor</span><span class="token operator">=</span>unconfined myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="🔥-5-docker-checkpoint-检查点与恢复" tabindex="-1"><a class="header-anchor" href="#🔥-5-docker-checkpoint-检查点与恢复"><span>🔥 5. <code>docker checkpoint</code>（检查点与恢复）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> checkpoint create container_id checkpoint1</span>
<span class="line"><span class="token function">docker</span> start <span class="token parameter variable">--checkpoint</span> checkpoint1 container_id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需启用实验特性。</p></blockquote><h3 id="🔥-6-docker-build-squash-压缩镜像层" tabindex="-1"><a class="header-anchor" href="#🔥-6-docker-build-squash-压缩镜像层"><span>🔥 6. <code>docker build --squash</code>（压缩镜像层）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> build <span class="token parameter variable">--squash</span> <span class="token parameter variable">-t</span> myapp <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>减少镜像层数，需启用 <code>--experimental</code>。</p></blockquote><h3 id="🔥-7-docker-scan-镜像漏洞扫描" tabindex="-1"><a class="header-anchor" href="#🔥-7-docker-scan-镜像漏洞扫描"><span>🔥 7. <code>docker scan</code>（镜像漏洞扫描）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> scan nginx:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>需安装 <code>docker scan</code> 插件。</p></blockquote><h3 id="🔥-8-docker-context-多环境管理" tabindex="-1"><a class="header-anchor" href="#🔥-8-docker-context-多环境管理"><span>🔥 8. <code>docker context</code>（多环境管理）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> context create remote <span class="token parameter variable">--docker</span> <span class="token string">&quot;host=ssh://user@remote&quot;</span></span>
<span class="line"><span class="token function">docker</span> context use remote</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>管理多个 Docker 主机。</p></blockquote><hr><h2 id="四、最佳实践建议" tabindex="-1"><a class="header-anchor" href="#四、最佳实践建议"><span>四、最佳实践建议</span></a></h2><ol><li><strong>始终使用镜像加速器</strong>（如阿里云）</li><li><strong>使用 <code>.dockerignore</code></strong> 避免不必要的文件进入构建上下文</li><li><strong>使用非 root 用户运行容器</strong></li><li><strong>定期清理资源</strong>：<code>docker system prune -a</code></li><li><strong>使用 <code>--rm</code></strong> 临时容器</li><li><strong>生产环境使用 <code>docker compose</code> 或 Kubernetes</strong></li><li><strong>敏感信息使用 <code>docker secret</code> 或环境变量管理</strong></li></ol><hr><h2 id="✅-总结" tabindex="-1"><a class="header-anchor" href="#✅-总结"><span>✅ 总结</span></a></h2><table><thead><tr><th>类别</th><th>关键命令</th></tr></thead><tbody><tr><td>镜像</td><td><code>pull</code>, <code>build</code>, <code>push</code>, <code>tag</code>, <code>rmi</code></td></tr><tr><td>容器</td><td><code>run</code>, <code>start</code>, <code>stop</code>, <code>exec</code>, <code>logs</code></td></tr><tr><td>网络</td><td><code>network create</code>, <code>connect</code>, <code>inspect</code></td></tr><tr><td>卷</td><td><code>volume create</code>, <code>ls</code>, <code>prune</code></td></tr><tr><td>系统</td><td><code>system prune</code>, <code>info</code>, <code>version</code></td></tr><tr><td>Compose</td><td><code>up</code>, <code>down</code>, <code>logs</code>, <code>exec</code>, <code>config</code></td></tr><tr><td>高级</td><td><code>checkpoint</code>, <code>scan</code>, <code>context</code>, <code>build --squash</code></td></tr></tbody></table><hr><p>这份命令大全涵盖了 <strong>99% 的日常使用场景</strong>，并包含了一些<strong>高级运维技巧</strong>。建议收藏此页，作为您的 Docker 手册。</p>`,70)]))}const i=t(r,[["render",c],["__file","dockerchangyongmingling.html.vue"]]),l=JSON.parse('{"path":"/blogs/gongzuo/docker/dockerchangyongmingling.html","title":"docker 常用命令","lang":"en-US","frontmatter":{"title":"docker 常用命令","date":"2025/08/15","tags":["命令"],"categories":["docker"]},"headers":[{"level":2,"title":"一、Docker 基础命令分类","slug":"一、docker-基础命令分类","link":"#一、docker-基础命令分类","children":[{"level":3,"title":"✅ 1. 镜像管理（Image）","slug":"✅-1-镜像管理-image","link":"#✅-1-镜像管理-image","children":[]},{"level":3,"title":"✅ 2. 容器生命周期管理（Container）","slug":"✅-2-容器生命周期管理-container","link":"#✅-2-容器生命周期管理-container","children":[]},{"level":3,"title":"✅ 3. 容器查看与调试","slug":"✅-3-容器查看与调试","link":"#✅-3-容器查看与调试","children":[]},{"level":3,"title":"✅ 4. 网络管理（Network）","slug":"✅-4-网络管理-network","link":"#✅-4-网络管理-network","children":[]},{"level":3,"title":"✅ 5. 存储卷管理（Volume）","slug":"✅-5-存储卷管理-volume","link":"#✅-5-存储卷管理-volume","children":[]},{"level":3,"title":"✅ 6. 构建与镜像制作（Build）","slug":"✅-6-构建与镜像制作-build","link":"#✅-6-构建与镜像制作-build","children":[]},{"level":3,"title":"✅ 7. Docker 系统与信息","slug":"✅-7-docker-系统与信息","link":"#✅-7-docker-系统与信息","children":[]}]},{"level":2,"title":"二、Docker Compose 命令大全","slug":"二、docker-compose-命令大全","link":"#二、docker-compose-命令大全","children":[{"level":3,"title":"✅ 常用命令","slug":"✅-常用命令","link":"#✅-常用命令","children":[]},{"level":3,"title":"✅ 高级 Compose 技巧","slug":"✅-高级-compose-技巧","link":"#✅-高级-compose-技巧","children":[]}]},{"level":2,"title":"三、您可能不知道的 Docker 高级命令","slug":"三、您可能不知道的-docker-高级命令","link":"#三、您可能不知道的-docker-高级命令","children":[{"level":3,"title":"🔥 1. docker stats --format（自定义输出）","slug":"🔥-1-docker-stats-format-自定义输出","link":"#🔥-1-docker-stats-format-自定义输出","children":[]},{"level":3,"title":"🔥 2. docker run --init（使用 tini 作为 init 进程）","slug":"🔥-2-docker-run-init-使用-tini-作为-init-进程","link":"#🔥-2-docker-run-init-使用-tini-作为-init-进程","children":[]},{"level":3,"title":"🔥 3. docker run --read-only（只读文件系统）","slug":"🔥-3-docker-run-read-only-只读文件系统","link":"#🔥-3-docker-run-read-only-只读文件系统","children":[]},{"level":3,"title":"🔥 4. docker run --security-opt（安全选项）","slug":"🔥-4-docker-run-security-opt-安全选项","link":"#🔥-4-docker-run-security-opt-安全选项","children":[]},{"level":3,"title":"🔥 5. docker checkpoint（检查点与恢复）","slug":"🔥-5-docker-checkpoint-检查点与恢复","link":"#🔥-5-docker-checkpoint-检查点与恢复","children":[]},{"level":3,"title":"🔥 6. docker build --squash（压缩镜像层）","slug":"🔥-6-docker-build-squash-压缩镜像层","link":"#🔥-6-docker-build-squash-压缩镜像层","children":[]},{"level":3,"title":"🔥 7. docker scan（镜像漏洞扫描）","slug":"🔥-7-docker-scan-镜像漏洞扫描","link":"#🔥-7-docker-scan-镜像漏洞扫描","children":[]},{"level":3,"title":"🔥 8. docker context（多环境管理）","slug":"🔥-8-docker-context-多环境管理","link":"#🔥-8-docker-context-多环境管理","children":[]}]},{"level":2,"title":"四、最佳实践建议","slug":"四、最佳实践建议","link":"#四、最佳实践建议","children":[]},{"level":2,"title":"✅ 总结","slug":"✅-总结","link":"#✅-总结","children":[]}],"git":{"createdTime":1755222884000,"updatedTime":1755223143000,"contributors":[{"name":"huangcheng","email":"2387020215@qq.com","commits":2}]},"filePathRelative":"blogs/工作/docker/docker常用命令.md"}');export{i as comp,l as data};
