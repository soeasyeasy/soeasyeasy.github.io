import{_ as l,c as i,a as t,o as r}from"./app-qwDAWgIM.js";const o="/assets/xxl-job%E7%89%88%E6%9C%AC2.2.0%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-Bp62y2o-.png",s={};function n(a,e){return r(),i("div",null,e[0]||(e[0]=[t('<p><img src="'+o+`" alt=" XXL-JOB 版本 2.2.0 代码逻辑"></p><h3 id="调度中心" tabindex="-1"><a class="header-anchor" href="#调度中心"><span>调度中心</span></a></h3><ul><li><strong>XxlJobAdminConfig</strong><ul><li><strong>执行器监听</strong><ul><li>加载所有执行器</li><li>移除未存活、更新执行器地址</li><li>每 30 秒循环一次</li></ul></li><li><strong>任务失败监听</strong><ul><li>告警</li><li>每 10 秒循环一次</li></ul></li><li><strong>快慢线程池初始化</strong></li><li><strong>日志报告刷新和过期日志清理</strong></li><li><strong>调度线程 scheduleThread</strong><ul><li>每 5 秒执行一次</li><li>预读数据量 6000（该数量是根据触发器池快速和慢速的最大值以及假设每个触发器执行需要 50 毫秒来估算的）</li><li>使用调度中心数据库悲观分布式锁防止在集群模式下重复调度</li><li>获取数据：查询<code>xxl_job_info</code>表，获取<code>trigger_next_time</code>在当前时间之后且在预读时间范围内的任务列表<code>scheduleList</code></li><li>处理数据： <ul><li>已经过期超过 5 秒：更新任务的下次触发时间</li><li>过期但未超过 5 秒：触发任务，并更新下次触发时间</li><li>未到执行时间：加入到时间环中，并更新下次触发时间</li></ul></li></ul></li><li><strong>时间轮线程 ringThread</strong><ul><li><code>ringThread</code>线程每隔一秒执行一次，根据当前时间去取需要触发的任务 ID，然后进行触发</li></ul></li><li><strong>触发任务 JobTriggerPoolHelper</strong><ul><li>快慢线程：某个任务在 1 分钟内超时（500ms）次数超过了 10 次，则将其加入慢速触发线程池</li><li><code>XxlJobTrigger.trigger</code>：路由策略<code>ExecutorRouter</code>的实现</li><li><code>XxlRpcReferenceBean.getObject()</code>：创建一个动态代理对象，远程调用指定的接口。调用执行器就会被 NettyHttpServerHandler 处理</li></ul></li></ul></li></ul><h3 id="执行器" tabindex="-1"><a class="header-anchor" href="#执行器"><span>执行器</span></a></h3><ul><li><strong>XxlJobSpringExecutor</strong><ul><li>项目启动时候将所有带有<code>XxlJob</code>注解的方法扫描进父类<code>XxlJobExecutor</code>的<code>mapjobHandlerRepository</code></li></ul></li><li><strong>XxlJobExecutor</strong><ul><li>初始化日志路径</li><li>初始化调度信息放入<code>adminBizList</code>【address、token】</li><li>启动日志清理线程<code>JobLogFileCleanThread</code></li><li><code>TriggerCallbackThread</code></li><li>注册到调度中心 <ul><li><code>initRpcProvider</code><ul><li>设置 nettyserver</li><li>设置序列化方式</li><li>设置调度中心地址</li><li>设置本机地址端口、执行器名称</li><li>启动：NettyHttpServerHandler</li></ul></li></ul></li></ul></li><li><strong>执行任务</strong><ul><li><strong>NettyHttpServerHandler</strong><ul><li>序列化出入参：<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">XxlRpcRequest xxlRpcRequest = (XxlRpcRequest) xxlRpcProviderFactory.getSerializerInstance().deserialize(requestBytes, XxlRpcRequest.class);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>调用序列化要执行出的方法并执行，实际上是通过<code>ExecutorBizImpl</code>方法里的逻辑执行。</li></ul></li><li><strong>ExecutorBizImpl</strong><ul><li>run：将要执行的任务放进<code>triggerQueue</code><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">jobThread.pushTriggerQueue(triggerParam)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><strong>JobThread</strong><ul><li>run：取出任务并执行<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">triggerParam = triggerQueue.poll(3L, TimeUnit.SECONDS);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul></li></ul>`,5)]))}const c=l(s,[["render",n],["__file","xxl-jobdaimaluoji.html.vue"]]),u=JSON.parse('{"path":"/blogs/gongzuo/xxl-job/xxl-jobdaimaluoji.html","title":"XXL-JOB 版本 2.2.0 代码逻辑","lang":"en-US","frontmatter":{"title":"XXL-JOB 版本 2.2.0 代码逻辑","date":"2025/03/03","tags":["xxl-job"],"categories":["xxl-job"]},"headers":[{"level":3,"title":"调度中心","slug":"调度中心","link":"#调度中心","children":[]},{"level":3,"title":"执行器","slug":"执行器","link":"#执行器","children":[]}],"git":{"createdTime":1740995408000,"updatedTime":1755076413000,"contributors":[{"name":"huangcheng","email":"2387020215@qq.com","commits":1}]},"filePathRelative":"blogs/工作/xxl-job/xxl-job代码逻辑.md"}');export{c as comp,u as data};
